<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Http\Response;
use Illuminate\Routing\Controller;

use Spatie\Permission\Models\Role;
use Spatie\Permission\Models\Permission;

class RolesController extends Controller
{

    public function __construct()
    {
        $this->middleware('auth');
    }

    /**
     * Display a listing of the resource.
     * @return Response
     */
    public function index()
    {	
        $data = Role::orderBy('name')->paginate(20);
		return view('users.roles.index',['data'=>$data]);
    }
	
	/**
     * Show the form for creating a new resource.
     * @return Response
     */
    public function create()
    {
        $permissions = Permission::where('status','Y')->orderBy('category','asc')->orderBy('name','asc')->get();
        return view('users.roles.create',['permissions'=>$permissions]);
    }

    /**
     * Store a newly created resource in storage.
     * @param Request $request
     * @return Response
     */
    public function store(Request $request)
    {
        $validatedData = $request->validate([
			'name' => 'required|unique:roles'
        ]);

        //echo "<pre>"; print_r(request()->all()); exit;

        $input = request()->all();
        $roledata = [
            'name' => $input["name"]
        ];
        $roledata['status'] = "Y";
		$role = Role::create($roledata);
        if(isset($input['permission']) && count($input['permission'])>0){    
            $role->syncPermissions($input['permission']);
        }

        return redirect('admin/roles')->with('success', 'Role created successfully.');
    }

    /**
     * Show the specified resource.
     * @param int $id
     * @return Response
     */
    public function show($id)
    {
        return view('users.roles.show');
    }

    /**
     * Show the form for editing the specified resource.
     * @param int $id
     * @return Response
     */
    public function edit($id)
    {
        $role = Role::find($id);
        $permissions = Permission::where('status','Y')->get();
        //$role->load('permissions');
        //$role = Role::findByName('roleperm1')->permissions()->get();
        //$role = Role::findById($id);

        //dd($role->load('permissions'));

        $rolewisepermissions = $role->getAllPermissions();
        
        $rolepermissions = array();
        $dp = array();
        foreach ($rolewisepermissions as $key => $permission) {
            $rolepermissions[] = $permission->id;
            $dp[]=$permission->name;
           
        }
        
        //dd($rolepermissions);

		return view('users.roles.edit',['rolepermissions'=>$rolepermissions,'permissions'=>$permissions, 'roledetails'=>$role,'dp'=>$dp]);
    }

    /**
     * Update the specified resource in storage.
     * @param Request $request
     * @param int $id
     * @return Response
     */
    public function update(Request $request, $id)
    {
        $validatedData = $request->validate([
			'name' => 'required|unique:roles,name,'.$id
		]);

		$requestdata = $request->all(); 
		



		$data['name'] = $requestdata['name'];
        $role = Role::find($id);
         $permission = Permission::find($id);
        // $role->givePermissionTo(Permission::all()); 
		//Update details
		$role->update($data);
 // old Line $role->syncPermissions($requestdata['permission']);
  //foreach($requestdata as $rd)
 //           {
          //          if($requestdata['permission']!='')
                //    {
                //         $role->givePermissionTo($requestdata['permission']);
                 //   }
                 //   else
                 //   $role->syncPermissions($requestdata['permission']);
                    
           // }
                    
        if(isset($requestdata['permission']) && count($requestdata['permission'])>0){
            
           
         if($role->hasAnyPermission($requestdata['permission']))
         {
             $role->revokePermissionTo($requestdata['permission']);
             $role->syncPermissions($requestdata['permission']);
             
         }
       
         $role->givePermissionTo($requestdata['permission']);
         
             // $role->revokePermissionTo($requestdata['permission']);
             // $permission->removeRole($role); 
          
               //$role->->syncPermissions($requestdata['permission']);
                   // $role->givePermissionTo($requestdata['permission']);
         
            
            //$role->givePermissionTo($requestdata['permission']);  // added by durga
            return redirect('admin/roles')->with('success', 'Role updated successfully.');
        }else{
            $role->syncPermissions([]);
            return redirect('admin/roles')->with('success', 'Role updated successfullyno');
        }


		
    }

    /**
     * Remove the specified resource from storage.
     * @param int $id
     * @return Response
     */
    public function destroy($id)
    {
        //Role::destroy($id);
        $data = array();
        $data['status'] = "D";

        $role = Role::find($id);
        $users = \App\User::role($role->name)->get();
        if ($users->count() == 0) {
            $role->update($data);
            return redirect('admin/roles')->with('success', 'Role deleted successfully.');
        }
        else {
            return redirect('admin/roles')->withErrors("Can't delete the role. Users with " . $role->name . " role  present.");
        }
    }
}
